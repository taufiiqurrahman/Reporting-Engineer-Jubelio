# -*- coding: utf-8 -*-
"""Task5_Taufiqurrahman

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MiLXpCrpNnmkXdAsRXOkMp8Yk_kJx1sY
"""

# Nama File: jubelio_reporting_automation.py
# Deskripsi: Skrip Python untuk mengotomatisasi tugas reporting engineer Jubelio.
# Author: TAUFIQURRAHMAN (berdasarkan permintaan pengguna)
# Tanggal: 1 Juni 2025

import sqlite3
import csv
import pandas as pd
import os
from datetime import datetime
import matplotlib.pyplot as plt
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.drawing.image import Image as OpenpyxlImage
from io import BytesIO

# --- Konfigurasi Global ---
DB_NAME = 'jubelio_report_data.db'
OUTPUT_FOLDER = 'Task5_TAUFIQURRAHMAN_Python_Output'
PROMO_CODE_CSV = 'promo_code.csv' # Pastikan file ini ada di direktori yang sama dengan skrip
EXCEL_REPORT_NAME = os.path.join(OUTPUT_FOLDER, 'Jubelio_Report_TAUFIQURRAHMAN.xlsx')
SQL_DUMP_NAME = os.path.join(OUTPUT_FOLDER, 'jubelio_database_schema_and_queries.sql')

# Daftar untuk menyimpan semua perintah SQL yang dieksekusi
executed_sql_commands = []

# --- Fungsi Bantuan Database ---
def execute_query(query, params=None, db_name=DB_NAME, record_sql=True):
    """Menjalankan kueri SQL pada database."""
    if record_sql:
        executed_sql_commands.append(query + (f" -- PARAMS: {params}" if params else ""))
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    try:
        if params:
            cursor.execute(query, params)
        else:
            cursor.execute(query)
        conn.commit()
    except sqlite3.Error as e:
        print(f"Database error: {e}")
        print(f"Query: {query}")
    finally:
        conn.close()

def execute_script(script, db_name=DB_NAME, record_sql=True):
    """Menjalankan skrip SQL (multiple statements) pada database."""
    if record_sql:
        executed_sql_commands.append(script)
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    try:
        cursor.executescript(script)
        conn.commit()
    except sqlite3.Error as e:
        print(f"Database script error: {e}")
        print(f"Script: {script}")
    finally:
        conn.close()

def fetch_data(query, params=None, db_name=DB_NAME):
    """Mengambil data dari database dan mengembalikannya sebagai DataFrame Pandas."""
    conn = sqlite3.connect(db_name)
    try:
        df = pd.read_sql_query(query, conn, params=params)
        return df
    except Exception as e:
        print(f"Error fetching data: {e}")
        print(f"Query: {query}")
        return pd.DataFrame()
    finally:
        conn.close()

# --- 1. Membuat Tabel dan Impor Data Awal ---
def setup_database_schema():
    """Membuat skema database awal."""
    print("Membuat skema database...")

    # Hapus database lama jika ada untuk memastikan skrip idempotent
    if os.path.exists(DB_NAME):
        os.remove(DB_NAME)

    # Tabel promo_code
    create_promo_code_table = """
    CREATE TABLE promo_code (
        promo_id INT PRIMARY KEY,
        promo_name VARCHAR(255),
        price_deduction DECIMAL(10, 2),
        Description TEXT,
        Duration INT
    );
    """
    execute_query(create_promo_code_table)

    # Tabel marketplace_table (Contoh)
    create_marketplace_table = """
    CREATE TABLE marketplace_table (
        product_id INT PRIMARY KEY,
        product_name VARCHAR(255),
        price DECIMAL(10, 2)
    );
    """
    execute_query(create_marketplace_table)

    # Tabel sales_table (Contoh)
    create_sales_table = """
    CREATE TABLE sales_table (
        sales_id INT PRIMARY KEY,
        purchase_date DATE,
        product_id INT,
        quantity INT,
        promo_code_id INT,
        buyer_id INT,
        FOREIGN KEY (product_id) REFERENCES marketplace_table(product_id),
        FOREIGN KEY (promo_code_id) REFERENCES promo_code(promo_id)
    );
    """
    execute_query(create_sales_table)

    # Tabel seller_table (Contoh)
    create_seller_table = """
    CREATE TABLE seller_table (
        seller_id INT PRIMARY KEY,
        seller_name VARCHAR(255)
    );
    """
    execute_query(create_seller_table)

    # Tabel buyer_table (Contoh)
    create_buyer_table = """
    CREATE TABLE buyer_table (
        buyer_id INT PRIMARY KEY,
        buyer_name VARCHAR(255),
        buyer_address TEXT,
        buyer_city VARCHAR(100),
        buyer_zipcode VARCHAR(20)
    );
    """
    execute_query(create_buyer_table)

    # Tabel shipping_table (Contoh)
    create_shipping_table = """
    CREATE TABLE shipping_table (
        shipping_id INT PRIMARY KEY,
        sales_id INT,
        shipping_date DATE,
        seller_id INT,
        buyer_id INT,
        FOREIGN KEY (sales_id) REFERENCES sales_table(sales_id),
        FOREIGN KEY (seller_id) REFERENCES seller_table(seller_id),
        FOREIGN KEY (buyer_id) REFERENCES buyer_table(buyer_id)
    );
    """
    execute_query(create_shipping_table)

    # Tabel Q3_Q4_Review
    create_q3_q4_review_table = """
    CREATE TABLE Q3_Q4_Review (
        purchase_date DATE,
        total_price DECIMAL(15, 2),
        promo_code VARCHAR(255),
        sales_after_promo DECIMAL(15, 2)
    );
    """
    execute_query(create_q3_q4_review_table)

    # Tabel shipping_summary
    create_shipping_summary_table = """
    CREATE TABLE shipping_summary (
        shipping_date DATE,
        seller_name VARCHAR(255),
        buyer_name VARCHAR(255),
        buyer_address TEXT,
        buyer_city VARCHAR(100),
        buyer_zipcode VARCHAR(20),
        kode_resi VARCHAR(255) PRIMARY KEY
    );
    """
    execute_query(create_shipping_summary_table)
    print("Skema database berhasil dibuat.")

def import_promo_code_data():
    """Mengimpor data dari promo_code.csv ke tabel promo_code."""
    print(f"Mengimpor data dari {PROMO_CODE_CSV}...")
    try:
        with open(PROMO_CODE_CSV, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                # Membersihkan nilai price_deduction jika perlu
                price_deduction_val = row['price_deduction']
                if isinstance(price_deduction_val, str) and not price_deduction_val.replace('.', '', 1).isdigit():
                    price_deduction_val = 0.0 # Default jika tidak valid
                else:
                    price_deduction_val = float(price_deduction_val)

                insert_query = """
                INSERT INTO promo_code (promo_id, promo_name, price_deduction, Description, Duration)
                VALUES (?, ?, ?, ?, ?);
                """
                params = (
                    int(row['promo_id']),
                    row['promo_name'],
                    price_deduction_val,
                    row['Description'],
                    int(row['Duration'])
                )
                execute_query(insert_query, params)
        print(f"Data dari {PROMO_CODE_CSV} berhasil diimpor.")
    except FileNotFoundError:
        print(f"Error: File {PROMO_CODE_CSV} tidak ditemukan. Pastikan file ada di direktori yang sama.")
        exit() # Keluar jika file penting tidak ada
    except Exception as e:
        print(f"Error saat mengimpor {PROMO_CODE_CSV}: {e}")

def populate_sample_data():
    """Mengisi tabel-tabel lain dengan data contoh."""
    print("Mengisi data contoh untuk tabel lain...")

    # Data contoh untuk marketplace_table
    marketplace_data = [
        (1, 'Produk A', 50000.00), (2, 'Produk B', 75000.00),
        (3, 'Produk C', 120000.00), (4, 'Produk D', 30000.00)
    ]
    for data in marketplace_data:
        execute_query("INSERT INTO marketplace_table VALUES (?, ?, ?)", data)

    # Data contoh untuk sales_table
    # Pastikan ada data untuk Q3 & Q4 2022, dan beberapa menggunakan promo
    sales_data = [
        (1, '2022-06-15', 1, 2, 1, 101), # Di luar periode
        (2, '2022-07-05', 2, 1, 2, 102), # Q3, dengan promo
        (3, '2022-08-10', 1, 3, None, 103), # Q3, tanpa promo
        (4, '2022-09-20', 3, 1, 3, 101), # Q3, dengan promo
        (5, '2022-10-01', 4, 2, 1, 104), # Q4, dengan promo (AWAL_GAJIAN)
        (6, '2022-11-15', 2, 2, None, 102), # Q4, tanpa promo
        (7, '2022-12-12', 1, 1, 4, 103), # Q4, dengan promo (HARBOLNAS)
        (8, '2022-12-25', 3, 1, 11, 104), # Q4, dengan promo (CHRISTMAS)
        (9, '2023-01-10', 2, 1, None, 101)  # Di luar periode
    ]
    for data in sales_data:
        execute_query("INSERT INTO sales_table VALUES (?, ?, ?, ?, ?, ?)", data)

    # Data contoh untuk seller_table
    seller_data = [
        (1, 'Toko Jaya Abadi'), (2, 'Seller Sukses Selalu')
    ]
    for data in seller_data:
        execute_query("INSERT INTO seller_table VALUES (?, ?)", data)

    # Data contoh untuk buyer_table
    buyer_data = [
        (101, 'Andi Budi', 'Jl. Merdeka No. 10, Jakarta', 'Jakarta', '10110'),
        (102, 'Siti Aminah', 'Jl. Pahlawan No. 5, Bandung', 'Bandung', '40123'),
        (103, 'Charlie Darmawan', 'Jl. Sudirman Kav. 25, Surabaya', 'Surabaya', '60234'),
        (104, 'Dewi Lestari', 'Jl. Gajah Mada No. 1, Medan', 'Medan', '20151')
    ]
    for data in buyer_data:
        execute_query("INSERT INTO buyer_table VALUES (?, ?, ?, ?, ?)", data)

    # Data contoh untuk shipping_table
    # Pastikan ada data untuk Desember 2022
    shipping_data = [
        (1, 2, '2022-07-07', 1, 102),
        (2, 3, '2022-08-12', 2, 103),
        (3, 5, '2022-10-03', 1, 104),
        (4, 7, '2022-12-14', 2, 103), # Desember
        (5, 8, '2022-12-27', 1, 104)  # Desember
    ]
    for data in shipping_data:
        execute_query("INSERT INTO shipping_table VALUES (?, ?, ?, ?, ?)", data)
    print("Data contoh berhasil diisi.")

# --- 2. Mengisi Tabel Laporan ---
def populate_q3_q4_review():
    """Mengisi tabel Q3_Q4_Review."""
    print("Mengisi tabel Q3_Q4_Review...")
    query = """
    INSERT INTO Q3_Q4_Review (purchase_date, total_price, promo_code, sales_after_promo)
    SELECT
        s.purchase_date,
        (s.quantity * mp.price) AS total_price,
        pc.promo_name,
        (s.quantity * mp.price) - COALESCE(pc.price_deduction, 0) AS sales_after_promo
    FROM
        sales_table s
    JOIN
        marketplace_table mp ON s.product_id = mp.product_id
    LEFT JOIN
        promo_code pc ON s.promo_code_id = pc.promo_id
    WHERE
        s.purchase_date BETWEEN '2022-07-01' AND '2022-12-31';
    """
    execute_query(query)
    print("Tabel Q3_Q4_Review berhasil diisi.")

def populate_shipping_summary():
    """Mengisi tabel shipping_summary."""
    print("Mengisi tabel shipping_summary...")
    # Ambil data yang diperlukan menggunakan Pandas untuk mempermudah konkatenasi kode resi
    query_data_for_shipping = """
    SELECT
        s.shipping_id,
        s.shipping_date,
        sl.seller_name,
        b.buyer_name,
        b.buyer_address,
        b.buyer_city,
        b.buyer_zipcode,
        st.purchase_date,
        s.buyer_id,
        s.seller_id
    FROM
        shipping_table s
    JOIN
        seller_table sl ON s.seller_id = sl.seller_id
    JOIN
        buyer_table b ON s.buyer_id = b.buyer_id
    JOIN
        sales_table st ON s.sales_id = st.sales_id
    WHERE
        strftime('%m', s.shipping_date) = '12' AND strftime('%Y', s.shipping_date) = '2022';
    """
    # strftime('%m', date_column) untuk bulan, strftime('%Y', date_column) untuk tahun di SQLite

    df_shipping = fetch_data(query_data_for_shipping)

    if not df_shipping.empty:
        # Konversi kolom tanggal ke format YYYYMMDD untuk kode resi
        df_shipping['purchase_date_formatted'] = pd.to_datetime(df_shipping['purchase_date']).dt.strftime('%Y%m%d')
        df_shipping['shipping_date_formatted'] = pd.to_datetime(df_shipping['shipping_date']).dt.strftime('%Y%m%d')

        df_shipping['kode_resi'] = (
            df_shipping['shipping_id'].astype(str) + '-' +
            df_shipping['purchase_date_formatted'] + '-' +
            df_shipping['shipping_date_formatted'] + '-' +
            df_shipping['buyer_id'].astype(str) + '-' +
            df_shipping['seller_id'].astype(str)
        )

        for index, row in df_shipping.iterrows():
            insert_summary_query = """
            INSERT INTO shipping_summary (shipping_date, seller_name, buyer_name, buyer_address, buyer_city, buyer_zipcode, kode_resi)
            VALUES (?, ?, ?, ?, ?, ?, ?);
            """
            params = (
                row['shipping_date'],
                row['seller_name'],
                row['buyer_name'],
                row['buyer_address'],
                row['buyer_city'],
                row['buyer_zipcode'],
                row['kode_resi']
            )
            execute_query(insert_summary_query, params, record_sql=False) # SQL sudah dicatat dari SELECT
        print("Tabel shipping_summary berhasil diisi.")
    else:
        print("Tidak ada data pengiriman untuk Desember 2022.")


# --- 3. Analisis Data, Visualisasi, dan Ekspor Excel ---
def create_excel_report():
    """Membuat laporan Excel dengan data, pivot, dan visualisasi."""
    print(f"Membuat laporan Excel: {EXCEL_REPORT_NAME}...")

    # Buat folder output jika belum ada
    if not os.path.exists(OUTPUT_FOLDER):
        os.makedirs(OUTPUT_FOLDER)

    with pd.ExcelWriter(EXCEL_REPORT_NAME, engine='openpyxl') as writer:
        # Ambil data Q3_Q4_Review
        df_q3_q4 = fetch_data("SELECT * FROM Q3_Q4_Review;")
        if not df_q3_q4.empty:
            df_q3_q4.to_excel(writer, sheet_name='Q3_Q4_Review_Data', index=False)

            # --- Pivot Table 1: Trend Penjualan Bulanan Setelah Promo ---
            df_q3_q4['purchase_date'] = pd.to_datetime(df_q3_q4['purchase_date'])
            df_q3_q4['transaction_month'] = df_q3_q4['purchase_date'].dt.strftime('%Y-%m')

            pivot_revenue = df_q3_q4.groupby('transaction_month')['sales_after_promo'].sum().reset_index()
            pivot_revenue.columns = ['Bulan Transaksi', 'Total Penjualan Setelah Promo']
            pivot_revenue.to_excel(writer, sheet_name='Pivot_Revenue', index=False)

            # Visualisasi untuk Pivot Revenue
            if not pivot_revenue.empty:
                fig_revenue, ax_revenue = plt.subplots(figsize=(10, 6))
                ax_revenue.plot(pivot_revenue['Bulan Transaksi'], pivot_revenue['Total Penjualan Setelah Promo'], marker='o')
                ax_revenue.set_title('Trend Penjualan Bulanan (Setelah Promo) Q3-Q4 2022')
                ax_revenue.set_xlabel('Bulan Transaksi')
                ax_revenue.set_ylabel('Total Penjualan (Rp)')
                ax_revenue.grid(True)
                plt.xticks(rotation=45)
                plt.tight_layout()

                # Simpan chart ke buffer dan tambahkan ke Excel
                img_buffer_revenue = BytesIO()
                fig_revenue.savefig(img_buffer_revenue, format='png')
                img_buffer_revenue.seek(0)
                img_revenue = OpenpyxlImage(img_buffer_revenue)

                ws_revenue = writer.sheets['Pivot_Revenue']
                ws_revenue.add_image(img_revenue, 'D2') # Tambahkan chart di sel D2
                plt.close(fig_revenue) # Tutup plot agar tidak ditampilkan

            # --- Pivot Table 2: Rasio Penggunaan Promo ---
            # Hitung transaksi dengan dan tanpa promo per bulan
            df_q3_q4['has_promo'] = df_q3_q4['promo_code'].notna() & (df_q3_q4['promo_code'] != '')

            promo_usage_counts = df_q3_q4.groupby(['transaction_month', 'has_promo']).size().unstack(fill_value=0)
            if True not in promo_usage_counts.columns:
                 promo_usage_counts[True] = 0
            if False not in promo_usage_counts.columns:
                 promo_usage_counts[False] = 0

            promo_usage_counts.rename(columns={True: 'Dengan Promo', False: 'Tanpa Promo'}, inplace=True)
            promo_usage_counts['Total Transaksi'] = promo_usage_counts['Dengan Promo'] + promo_usage_counts['Tanpa Promo']

            # Hitung rasio
            promo_usage_counts['Rasio Dengan Promo (%)'] = (promo_usage_counts['Dengan Promo'] / promo_usage_counts['Total Transaksi']) * 100
            promo_usage_counts['Rasio Tanpa Promo (%)'] = (promo_usage_counts['Tanpa Promo'] / promo_usage_counts['Total Transaksi']) * 100

            pivot_ratio = promo_usage_counts.reset_index()
            pivot_ratio.to_excel(writer, sheet_name='Pivot_Rasio_Promo', index=False)

            # Visualisasi untuk Pivot Rasio (100% Stacked Bar Chart)
            if not pivot_ratio.empty and 'Rasio Dengan Promo (%)' in pivot_ratio.columns and 'Rasio Tanpa Promo (%)' in pivot_ratio.columns:
                fig_ratio, ax_ratio = plt.subplots(figsize=(12, 7))
                # Data untuk stacked bar
                months = pivot_ratio['transaction_month']
                rasio_dengan_promo = pivot_ratio['Rasio Dengan Promo (%)']
                rasio_tanpa_promo = pivot_ratio['Rasio Tanpa Promo (%)']

                ax_ratio.bar(months, rasio_dengan_promo, label='Dengan Promo (%)')
                ax_ratio.bar(months, rasio_tanpa_promo, bottom=rasio_dengan_promo, label='Tanpa Promo (%)')

                ax_ratio.set_title('Rasio Penggunaan Promo Bulanan Q3-Q4 2022')
                ax_ratio.set_xlabel('Bulan Transaksi')
                ax_ratio.set_ylabel('Persentase Transaksi (%)')
                ax_ratio.legend()
                ax_ratio.grid(axis='y', linestyle='--')
                plt.xticks(rotation=45)
                plt.tight_layout()

                img_buffer_ratio = BytesIO()
                fig_ratio.savefig(img_buffer_ratio, format='png')
                img_buffer_ratio.seek(0)
                img_ratio = OpenpyxlImage(img_buffer_ratio)

                ws_ratio = writer.sheets['Pivot_Rasio_Promo']
                # Cari baris kosong setelah tabel data untuk menempatkan chart
                # Anggap tabel data berakhir di baris len(pivot_ratio) + 2 (header + 1 baris kosong)
                # dan chart diletakkan di kolom A
                chart_start_row = len(pivot_ratio) + 3
                ws_ratio.add_image(img_ratio, f'A{chart_start_row}')
                plt.close(fig_ratio)
        else:
            print("Tidak ada data di Q3_Q4_Review untuk dilaporkan.")

        # Ekspor data shipping_summary
        df_shipping_summary = fetch_data("SELECT * FROM shipping_summary;")
        if not df_shipping_summary.empty:
            df_shipping_summary.to_excel(writer, sheet_name='Shipping_Summary_Data', index=False)
        else:
            print("Tidak ada data di shipping_summary untuk dilaporkan.")
            # Buat sheet kosong jika tidak ada data
            pd.DataFrame().to_excel(writer, sheet_name='Shipping_Summary_Data', index=False)

    print(f"Laporan Excel berhasil dibuat: {EXCEL_REPORT_NAME}")

# --- 4. Membuat File SQL Dump ---
def create_sql_dump():
    """Menyimpan semua perintah SQL yang dieksekusi ke file .sql."""
    print(f"Membuat SQL dump: {SQL_DUMP_NAME}...")
    with open(SQL_DUMP_NAME, 'w', encoding='utf-8') as f:
        f.write("-- Skrip SQL untuk Database Jubelio Reporting\n")
        f.write(f"-- Dihasilkan pada: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        for command in executed_sql_commands:
            f.write(command + ";\n\n") # Tambahkan titik koma untuk setiap statement
    print(f"SQL dump berhasil dibuat: {SQL_DUMP_NAME}")

# --- Fungsi Utama ---
def main():
    """Fungsi utama untuk menjalankan seluruh proses."""
    start_time = datetime.now()
    print(f"Memulai proses otomatisasi laporan Jubelio pada {start_time.strftime('%Y-%m-%d %H:%M:%S')}...")

    # Buat folder output jika belum ada
    if not os.path.exists(OUTPUT_FOLDER):
        os.makedirs(OUTPUT_FOLDER)
        print(f"Folder output dibuat: {OUTPUT_FOLDER}")

    # 1. Setup Database
    setup_database_schema()
    import_promo_code_data() # Pastikan promo_code.csv ada
    populate_sample_data()   # Mengisi data contoh untuk tabel lain

    # 2. Mengisi Tabel Laporan
    populate_q3_q4_review()
    populate_shipping_summary()

    # 3. Membuat Laporan Excel
    create_excel_report()

    # 4. Membuat SQL Dump
    create_sql_dump()

    end_time = datetime.now()
    print(f"Proses selesai pada {end_time.strftime('%Y-%m-%d %H:%M:%S')}.")
    print(f"Total waktu eksekusi: {end_time - start_time}.")
    print(f"Semua output disimpan di folder: {OUTPUT_FOLDER}")
    print(f"File utama yang dihasilkan:\n- {EXCEL_REPORT_NAME}\n- {SQL_DUMP_NAME}")

if __name__ == '__main__':
    main()